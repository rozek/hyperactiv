{"version":3,"file":"index.js","sources":["../src/tools.js","../src/data.js","../src/batcher.js","../src/observe.js","../src/computed.js","../src/index.js","../src/dispose.js"],"sourcesContent":["const BIND_IGNORED = [\n  'String',\n  'Number',\n  'Object',\n  'Array',\n  'Boolean',\n  'Date'\n]\n\nexport function isObj(object) { return object && typeof object === 'object' }\nexport function setHiddenKey(object, key, value) {\n  Object.defineProperty(object, key, { value, enumerable: false, configurable: true })\n}\nexport function defineBubblingProperties(object, key, parent) {\n  setHiddenKey(object, '__key', key)\n  setHiddenKey(object, '__parent', parent)\n}\nexport function getInstanceMethodKeys(object) {\n  return (\n    Object\n      .getOwnPropertyNames(object)\n      .concat(\n        Object.getPrototypeOf(object) &&\n                BIND_IGNORED.indexOf(Object.getPrototypeOf(object).constructor.name) < 0 ?\n          Object.getOwnPropertyNames(Object.getPrototypeOf(object)) :\n          []\n      )\n      .filter(prop => prop !== 'constructor' && typeof object[prop] === 'function')\n  )\n}\n","export const data = {\n  computedStack: [],\n  trackerSymbol: Symbol('tracker')\n}\n","let queue = null\nexport const __batched = Symbol()\n\n/**\n * Will perform batched computations instantly.\n */\nexport function process() {\n  if(!queue)\n    return\n  for(const task of queue) {\n    task()\n    task[__batched] = false\n  }\n  queue = null\n}\n\nexport function enqueue(task, batch) {\n  if(task[__batched])\n    return\n  if(queue === null) {\n    queue = []\n    if(batch === true) {\n      queueMicrotask(process)\n    } else {\n      setTimeout(process, batch)\n    }\n  }\n  queue.push(task)\n}\n\n","import {\n  isObj,\n  defineBubblingProperties,\n  getInstanceMethodKeys,\n  setHiddenKey\n} from './tools.js'\nimport { data } from './data.js'\nimport { enqueue, __batched } from './batcher.js'\n\nconst { computedStack, trackerSymbol } = data\n\nconst observedSymbol = Symbol('__observed')\n\n/**\n * @typedef {Object} Options - Observe options.\n * @property {string[]} [props] - Observe only the properties listed.\n * @property {string[]} [ignore] - Ignore the properties listed.\n * @property {boolean | number} [batch] -\n *  Batch computed properties calls, wrapping them in a queueMicrotask and\n *  executing them in a new context and preventing excessive calls.\n *  If batch is an integer, the calls will be debounced by the value in milliseconds using setTimemout.\n * @prop {boolean} [deep] - Recursively observe nested objects and when setting new properties.\n * @prop {boolean} [bind] - Automatically bind methods to the observed object.\n */\n\n/**\n * Observes an object or an array and returns a proxified version which reacts on mutations.\n *\n * @template O\n * @param {O} obj - The object to observe.\n * @param {Options} options - Options\n * @returns {O} - A proxy wrapping the object.\n */\nexport function observe(obj, options = {}) {\n  // 'deep' is slower but reasonable; 'shallow' a performance enhancement but with side-effects\n  const {\n    props,\n    ignore,\n    batch,\n    deep = true,\n    bubble,\n    bind\n  } = options\n\n  // Ignore if the object is already observed\n  if(obj[observedSymbol]) {\n    return obj\n  }\n\n  // If the prop is explicitely not excluded\n  const isWatched = (prop, value) =>\n    prop !== observedSymbol &&\n    (\n      !props ||\n            props instanceof Array && props.includes(prop) ||\n            typeof props === 'function' && props(prop, value)\n    ) && (\n      !ignore ||\n            !(ignore instanceof Array && ignore.includes(prop)) &&\n            !(typeof ignore === 'function' && ignore(prop, value))\n    )\n\n  // If the deep flag is set, observe nested objects/arrays\n  if(deep) {\n    Object.entries(obj).forEach(function([key, val]) {\n      if(isObj(val) && isWatched(key, val)) {\n        obj[key] = observe(val, options)\n        // If bubble is set, we add keys to the object used to bubble up the mutation\n        if(bubble) {\n          defineBubblingProperties(obj[key], key, obj)\n        }\n      }\n    })\n  }\n\n  // For each observed object, each property is mapped with a set of computed functions depending on this property.\n  // Whenever a property is set, we re-run each one of the functions stored inside the matching Set.\n  const propertiesMap = new Map()\n\n  // Proxify the object in order to intercept get/set on props\n  const proxy = new Proxy(obj, {\n    get(_, prop) {\n      if(prop === observedSymbol)\n        return true\n\n      // If the prop is watched\n      if(isWatched(prop, obj[prop])) {\n        // If a computed function is being run\n        if(computedStack.length) {\n          const computedFn = computedStack[0]\n          // Tracks object and properties accessed during the function call\n          const tracker = computedFn[trackerSymbol]\n          if(tracker) {\n            let trackerSet = tracker.get(obj)\n            if(!trackerSet) {\n              trackerSet = new Set()\n              tracker.set(obj, trackerSet)\n            }\n            trackerSet.add(prop)\n          }\n          // Link the computed function and the property being accessed\n          let propertiesSet = propertiesMap.get(prop)\n          if(!propertiesSet) {\n            propertiesSet = new Set()\n            propertiesMap.set(prop, propertiesSet)\n          }\n          propertiesSet.add(computedFn)\n        }\n      }\n\n      return obj[prop]\n    },\n    set(_, prop, value) {\n      if(prop === '__handler') {\n        // Don't track bubble handlers\n        setHiddenKey(obj, '__handler', value)\n      } else if(!isWatched(prop, value)) {\n        // If the prop is ignored\n        obj[prop] = value\n      } else if(Array.isArray(obj) && prop === 'length' || obj[prop] !== value) {\n        // If the new/old value are not equal\n        const deeper = deep && isObj(value)\n\n        // Remove bubbling infrastructure and pass old value to handlers\n        const oldValue = obj[prop]\n        if(isObj(oldValue))\n          delete obj[prop]\n\n        // If the deep flag is set we observe the newly set value\n        obj[prop] = deeper ? observe(value, options) : value\n\n        // Co-opt assigned object into bubbling if appropriate\n        if(deeper && bubble) {\n          defineBubblingProperties(obj[prop], prop, obj)\n        }\n\n        const ancestry = [ prop ]\n        let parent = obj\n        while(parent) {\n          // If a handler explicitly returns 'false' then stop propagation\n          if(parent.__handler && parent.__handler(ancestry, value, oldValue, proxy) === false) {\n            break\n          }\n          // Continue propagation, traversing the mutated property's object hierarchy & call any __handlers along the way\n          if(parent.__key && parent.__parent) {\n            ancestry.unshift(parent.__key)\n            parent = parent.__parent\n          } else {\n            parent = null\n          }\n        }\n\n        const dependents = propertiesMap.get(prop)\n        if(dependents) {\n          // Retrieve the computed functions depending on the prop\n          for(const dependent of dependents) {\n            const tracker = dependent[trackerSymbol]\n            const trackedObj = tracker && tracker.get(obj)\n            const tracked = trackedObj && trackedObj.has(prop)\n            // If the function has been disposed or if the prop has not been used\n            // during the latest function call, delete the function reference\n            if(dependent.__disposed || tracker && !tracked) {\n              dependents.delete(dependent)\n            } else if(dependent !== computedStack[0]) {\n              // Run the computed function\n              if(typeof batch !== 'undefined' && batch !== false) {\n                enqueue(dependent, batch)\n                dependent[__batched] = true\n              } else {\n                dependent()\n              }\n            }\n          }\n        }\n      }\n\n      return true\n    }\n  })\n\n  if(bind) {\n    // Need this for binding es6 classes methods which are stored in the object prototype\n    getInstanceMethodKeys(obj).forEach(key => obj[key] = obj[key].bind(proxy))\n  }\n\n  return proxy\n}\n","import { data } from './data.js'\nconst { computedStack, trackerSymbol } = data\n\n/**\n * @typedef {Object} ComputedArguments - Computed Arguments.\n * @property {(fun: () => void) => void} computeAsync -\n * Will monitor the dependencies of the function passed as an argument. Useful when dealing with asynchronous computations.\n */\n\n/**\n * @typedef {Object} Options - Computed Options.\n * @property {boolean} [autoRun] -\n * If false, will not run the function argument when calling computed(function).\n * The computed function must be called **at least once** to calculate its dependencies.\n * @property {() => void} [callback] -\n * Specify a callback that will be re-runned each time a dependency changes instead of the computed function.\n */\n\n/**\n * Wraps a function and captures observed properties which are accessed during the function execution.\n * When those properties are mutated, the function is called to reflect the changes.\n *\n * @param {(args: ComputedArguments) => void} wrappedFunction\n * @param {Options} options\n */\nexport function computed(wrappedFunction, { autoRun = true, callback, bind, disableTracking = false } = {}) {\n  function observeComputation(fun, argsList = []) {\n    const target = callback || wrapper\n    // Track object and object properties accessed during this function call\n    if(!disableTracking) {\n      target[trackerSymbol] = new WeakMap()\n    }\n    // Store into the stack a reference to the computed function\n    computedStack.unshift(target)\n    // Inject the computeAsync argument which is used to manually declare when the computation takes part\n    if(argsList.length > 0) {\n      argsList = [...argsList, computeAsyncArg]\n    } else {\n      argsList = [computeAsyncArg]\n    }\n    // Run the computed function - or the async function\n    const result =\n      fun ? fun() :\n      bind ? wrappedFunction.apply(bind, argsList) :\n      wrappedFunction(...argsList)\n    // Remove the reference\n    computedStack.shift()\n    // Return the result\n    return result\n  }\n  const computeAsyncArg = { computeAsync: observeComputation }\n  const wrapper = (...argsList) => observeComputation(null, argsList)\n\n  // If autoRun, then call the function at once\n  if(autoRun) {\n    wrapper()\n  }\n\n  return wrapper\n}\n","import { observe } from './observe.js'\nimport { computed } from './computed.js'\nimport { dispose } from './dispose.js'\nimport { process } from './batcher.js'\n\nexport default {\n  observe,\n  computed,\n  dispose,\n  batch: process\n}\n","import { data } from './data.js'\n\n/**\n * Will remove the computed function from the reactive Maps (the next time an bound observer property is called) allowing garbage collection.\n *\n * @param {Function} computedFunction\n */\nexport function dispose(computedFunction) {\n  computedFunction[data.trackerSymbol] = null\n  return computedFunction.__disposed = true\n}\n"],"names":["BIND_IGNORED","isObj","object","setHiddenKey","key","value","Object","defineProperty","enumerable","configurable","defineBubblingProperties","parent","data","computedStack","trackerSymbol","Symbol","queue","__batched","process","task","enqueue","batch","queueMicrotask","setTimeout","push","observedSymbol","index","observe","obj","options","props","ignore","deep","bubble","bind","isWatched","prop","Array","includes","entries","forEach","val","propertiesMap","Map","proxy","Proxy","get","_","length","computedFn","tracker","trackerSet","Set","set","add","propertiesSet","isArray","deeper","oldValue","ancestry","__handler","__key","__parent","unshift","dependents","dependent","trackedObj","tracked","has","__disposed","delete","getOwnPropertyNames","concat","getPrototypeOf","indexOf","constructor","name","filter","computed","wrappedFunction","autoRun","callback","disableTracking","observeComputation","fun","argsList","target","wrapper","WeakMap","computeAsyncArg","result","apply","shift","computeAsync","dispose","computedFunction"],"mappings":"2OAAA,MAAMA,EAAe,CACnB,SACA,SACA,SACA,QACA,UACA,QAGK,SAASC,EAAMC,GAAU,OAAOA,GAA4B,iBAAXA,CAAqB,CACtE,SAASC,EAAaD,EAAQE,EAAKC,GACxCC,OAAOC,eAAeL,EAAQE,EAAK,CAAEC,QAAOG,YAAY,EAAOC,cAAc,GAC/E,CACO,SAASC,EAAyBR,EAAQE,EAAKO,GACpDR,EAAaD,EAAQ,QAASE,GAC9BD,EAAaD,EAAQ,WAAYS,EACnC,CChBO,MAAMC,EAAO,CAClBC,cAAe,GACfC,cAAeC,OAAO,YCFxB,IAAIC,EAAQ,KACL,MAAMC,EAAYF,SAKlB,SAASG,IACd,GAAIF,EAAJ,CAEA,IAAI,MAAMG,KAAQH,EAChBG,IACAA,EAAKF,IAAa,EAEpBD,EAAQ,IALN,CAMJ,CAEO,SAASI,EAAQD,EAAME,GACzBF,EAAKF,KAEK,OAAVD,IACDA,EAAQ,IACK,IAAVK,EACDC,eAAeJ,GAEfK,WAAWL,EAASG,IAGxBL,EAAMQ,KAAKL,GACb,CCnBA,oBAAQN,EAAaC,cAAEA,GAAkBF,EAEnCa,EAAiBV,OAAO,cCV9B,MAAMF,cAAEA,EAAaC,cAAEA,GAAkBF,ECI1B,IAAAc,EAAA,CACbC,QF2BK,SAASA,EAAQC,EAAKC,EAAU,IAErC,MAAMC,MACJA,EAAKC,OACLA,EAAMV,MACNA,EAAKW,KACLA,GAAO,EAAIC,OACXA,EAAMC,KACNA,GACEL,EAGJ,GAAGD,EAAIH,GACL,OAAOG,EAIT,MAAMO,EAAY,CAACC,EAAM/B,IACvB+B,IAASX,KAENK,GACKA,aAAiBO,OAASP,EAAMQ,SAASF,IACxB,mBAAVN,GAAwBA,EAAMM,EAAM/B,OAEhD0B,KACOA,aAAkBM,OAASN,EAAOO,SAASF,OACzB,mBAAXL,GAAyBA,EAAOK,EAAM/B,KAItD2B,GACD1B,OAAOiC,QAAQX,GAAKY,SAAQ,UAAUpC,EAAKqC,IACtCxC,EAAMwC,IAAQN,EAAU/B,EAAKqC,KAC9Bb,EAAIxB,GAAOuB,EAAQc,EAAKZ,GAErBI,GACDvB,EAAyBkB,EAAIxB,GAAMA,EAAKwB,GAGlD,IAKE,MAAMc,EAAgB,IAAIC,IAGpBC,EAAQ,IAAIC,MAAMjB,EAAK,CAC3B,GAAAkB,CAAIC,EAAGX,GACL,GAAGA,IAASX,EACV,OAAO,EAGT,GAAGU,EAAUC,EAAMR,EAAIQ,KAElBvB,EAAcmC,OAAQ,CACvB,MAAMC,EAAapC,EAAc,GAE3BqC,EAAUD,EAAWnC,GAC3B,GAAGoC,EAAS,CACV,IAAIC,EAAaD,EAAQJ,IAAIlB,GACzBuB,IACFA,EAAa,IAAIC,IACjBF,EAAQG,IAAIzB,EAAKuB,IAEnBA,EAAWG,IAAIlB,EAChB,CAED,IAAImB,EAAgBb,EAAcI,IAAIV,GAClCmB,IACFA,EAAgB,IAAIH,IACpBV,EAAcW,IAAIjB,EAAMmB,IAE1BA,EAAcD,IAAIL,EACnB,CAGH,OAAOrB,EAAIQ,EACZ,EACD,GAAAiB,CAAIN,EAAGX,EAAM/B,GACX,GAAY,cAAT+B,EAEDjC,EAAayB,EAAK,YAAavB,QAC1B,GAAI8B,EAAUC,EAAM/B,IAGpB,GAAGgC,MAAMmB,QAAQ5B,IAAiB,WAATQ,GAAqBR,EAAIQ,KAAU/B,EAAO,CAExE,MAAMoD,EAASzB,GAAQ/B,EAAMI,GAGvBqD,EAAW9B,EAAIQ,GAClBnC,EAAMyD,WACA9B,EAAIQ,GAGbR,EAAIQ,GAAQqB,EAAS9B,EAAQtB,EAAOwB,GAAWxB,EAG5CoD,GAAUxB,GACXvB,EAAyBkB,EAAIQ,GAAOA,EAAMR,GAG5C,MAAM+B,EAAW,CAAEvB,GACnB,IAAIzB,EAASiB,EACb,KAAMjB,KAEDA,EAAOiD,YAAoE,IAAvDjD,EAAOiD,UAAUD,EAAUtD,EAAOqD,EAAUd,KAIhEjC,EAAOkD,OAASlD,EAAOmD,UACxBH,EAASI,QAAQpD,EAAOkD,OACxBlD,EAASA,EAAOmD,UAEhBnD,EAAS,KAIb,MAAMqD,EAAatB,EAAcI,IAAIV,GACrC,GAAG4B,EAED,IAAI,MAAMC,KAAaD,EAAY,CACjC,MAAMd,EAAUe,EAAUnD,GACpBoD,EAAahB,GAAWA,EAAQJ,IAAIlB,GACpCuC,EAAUD,GAAcA,EAAWE,IAAIhC,GAG1C6B,EAAUI,YAAcnB,IAAYiB,EACrCH,EAAWM,OAAOL,GACVA,IAAcpD,EAAc,UAEhB,IAAVQ,IAAmC,IAAVA,GACjCD,EAAQ6C,EAAW5C,GACnB4C,EAAUhD,IAAa,GAEvBgD,IAGL,CAEJ,OAxDCrC,EAAIQ,GAAQ/B,EA0Dd,OAAO,CACR,IHhKE,IAA+BH,EGwKpC,OALGgC,IHnKiChC,EGqKZ0B,EHnKtBtB,OACGiE,oBAAoBrE,GACpBsE,OACClE,OAAOmE,eAAevE,IACdF,EAAa0E,QAAQpE,OAAOmE,eAAevE,GAAQyE,YAAYC,MAAQ,EAC7EtE,OAAOiE,oBAAoBjE,OAAOmE,eAAevE,IACjD,IAEH2E,QAAOzC,GAAiB,gBAATA,GAAkD,mBAAjBlC,EAAOkC,MG2J/BI,SAAQpC,GAAOwB,EAAIxB,GAAOwB,EAAIxB,GAAK8B,KAAKU,KAG9DA,CACT,EEnLEkC,SDkBK,SAAkBC,GAAiBC,QAAEA,GAAU,EAAIC,SAAEA,EAAQ/C,KAAEA,EAAIgD,gBAAEA,GAAkB,GAAU,IACtG,SAASC,EAAmBC,EAAKC,EAAW,IAC1C,MAAMC,EAASL,GAAYM,EAEvBL,IACFI,EAAOxE,GAAiB,IAAI0E,SAG9B3E,EAAckD,QAAQuB,GAGpBD,EADCA,EAASrC,OAAS,EACR,IAAIqC,EAAUI,GAEd,CAACA,GAGd,MAAMC,EACJN,EAAMA,IACNlD,EAAO6C,EAAgBY,MAAMzD,EAAMmD,GACnCN,KAAmBM,GAIrB,OAFAxE,EAAc+E,QAEPF,CACR,CACD,MAAMD,EAAkB,CAAEI,aAAcV,GAClCI,EAAU,IAAIF,IAAaF,EAAmB,KAAME,GAO1D,OAJGL,GACDO,IAGKA,CACT,ECnDEO,QCDK,SAAiBC,GAEtB,OADAA,EAAiBnF,EAAKE,eAAiB,KAChCiF,EAAiB1B,YAAa,CACvC,EDDEhD,MAAOH"}