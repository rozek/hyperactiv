{"version":3,"file":"index.js","sources":["../../src/http/tools.js","../../src/http/normalized.js","../../src/http/resource.js","../../src/http/request.js"],"sourcesContent":["export const defaultRootKey = '__requests__'\nexport const defaultSerialize = (method, url) => `${method}@${url}`\nexport const identity = _ => _\n\nexport const normalizedOperations = {\n  read(mappings, store) {\n    const storeFragment = {}\n    Object.entries(mappings).forEach(([ entity, ids ]) => {\n      storeFragment[entity] = {}\n      ids.forEach(key => {\n        storeFragment[entity][key] = store[entity] && store[entity][key] || null\n      })\n    })\n    return storeFragment\n  },\n  write(normalizedData, store) {\n    Object.entries(normalizedData).forEach(([ entity, entityData ]) => {\n      if(!store[entity]) {\n        store[entity] = {}\n      }\n\n      Object.entries(entityData).forEach(([ key, value ]) => {\n        if(store[entity][key]) {\n          if(typeof store[entity][key] === 'object' && typeof value === 'object') {\n            Object.entries(value).forEach(([k, v]) => {\n              store[entity][key][k] = v\n            })\n          } else {\n            store[entity][key] = value\n          }\n        } else {\n          store[entity][key] = value\n        }\n      })\n    })\n  }\n}\n","import wretch from 'wretch'\nimport { normaliz } from 'normaliz'\n\nimport { identity, defaultSerialize, defaultRootKey, normalizedOperations } from './tools.js'\n\nexport function normalized(url, {\n  store,\n  normalize,\n  client = wretch(),\n  beforeRequest = identity,\n  afterRequest = identity,\n  rootKey = defaultRootKey,\n  serialize = defaultSerialize,\n  bodyType = 'json',\n  policy = 'cache-first'\n}) {\n  const configuredClient = beforeRequest(client.url(url))\n  const storeKey = serialize('get', configuredClient._url)\n  if(!store[rootKey]) {\n    store[rootKey] = {}\n  }\n  const storedMappings = store[rootKey][storeKey]\n  const cacheLookup = policy !== 'network-only'\n  const data =\n        cacheLookup &&\n        storedMappings &&\n        normalizedOperations.read(storedMappings, store) ||\n        null\n\n  function refetch() {\n    return configuredClient\n      .get()\n    // eslint-disable-next-line no-unexpected-multiline\n      [bodyType](body => afterRequest(body))\n      .then(result => {\n        const normalizedData = normaliz(result, normalize)\n        store[rootKey][storeKey] = Object.entries(normalizedData).reduce((mappings, [ entity, dataById ]) => {\n          mappings[entity] = Object.keys(dataById)\n          return mappings\n        }, {})\n        normalizedOperations.write(normalizedData, store)\n        const storeSlice = normalizedOperations.read(store[rootKey][storeKey], store)\n        return storeSlice\n      })\n  }\n\n  const future = policy !== 'cache-first' || !data ? refetch() : null\n\n  return {\n    data,\n    refetch,\n    future\n  }\n}\n","import { normalized } from './normalized.js'\n\nfunction formatData(data, entity, id) {\n  return (\n    data ?\n      id !== null ?\n        data[entity] && data[entity][id] :\n        data[entity] && Object.values(data[entity]) :\n      data\n  )\n}\n\nexport function resource(entity, url, {\n  id = null,\n  store,\n  normalize,\n  client,\n  beforeRequest,\n  afterRequest,\n  serialize,\n  rootKey,\n  bodyType,\n  policy = 'cache-first'\n}) {\n  const storedEntity = id && store[entity] && store[entity][id]\n\n  const {\n    data,\n    future,\n    refetch: normalizedRefetch\n  } = normalized(url, {\n    store,\n    normalize: {\n      schema: [],\n      ...normalize,\n      entity\n    },\n    client,\n    beforeRequest,\n    afterRequest,\n    serialize,\n    rootKey,\n    bodyType,\n    policy\n  })\n\n  const refetch = () => normalizedRefetch().then(data =>\n    formatData(data, entity, id)\n  )\n\n  return {\n    data: policy !== 'network-only' && storedEntity || formatData(data, entity, id),\n    future: future && future.then(data => formatData(data, entity, id)) || null,\n    refetch\n  }\n}\n","import wretch from 'wretch'\n\nimport { identity, defaultSerialize, defaultRootKey } from './tools.js'\n\nexport function request(url, {\n  store,\n  client = wretch(),\n  beforeRequest = identity,\n  afterRequest = identity,\n  rootKey = defaultRootKey,\n  serialize = defaultSerialize,\n  bodyType = 'json',\n  policy = 'cache-first'\n}) {\n  const configuredClient = beforeRequest(client.url(url))\n  const storeKey = serialize('get', configuredClient._url)\n  if(!store[rootKey]) {\n    store[rootKey] = {}\n  }\n  const storedData = store[rootKey][storeKey]\n  const cacheLookup = policy !== 'network-only'\n  const data = cacheLookup && storedData || null\n\n  function refetch() {\n    return configuredClient\n      .get()\n    // eslint-disable-next-line no-unexpected-multiline\n      [bodyType](body => afterRequest(body))\n      .then(result => {\n        store[rootKey][storeKey] = result\n        return result\n      })\n  }\n\n  const future = policy !== 'cache-first' || !data ? refetch() : null\n\n  return {\n    data,\n    refetch,\n    future\n  }\n}\n"],"names":["defaultRootKey","defaultSerialize","method","url","identity","_","normalizedOperations","read","mappings","store","storeFragment","Object","entries","forEach","entity","ids","key","write","normalizedData","entityData","value","k","v","normalized","normalize","client","wretch","beforeRequest","afterRequest","rootKey","serialize","bodyType","policy","configuredClient","storeKey","_url","storedMappings","data","refetch","get","body","then","result","normaliz","reduce","dataById","keys","storeSlice","future","formatData","id","values","storedData","storedEntity","normalizedRefetch","schema"],"mappings":"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"}